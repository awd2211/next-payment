# 多阶段构建 Dockerfile 模板

# ========================================
# 构建阶段
# ========================================
FROM golang:1.21-alpine AS builder

# 安装必要的构建工具
RUN apk add --no-cache git gcc musl-dev

# 设置工作目录
WORKDIR /app

# 复制 go.mod 和 go.sum
COPY go.work go.work.sum ./
COPY pkg/go.mod pkg/go.sum ./pkg/

# 下载依赖
WORKDIR /app/pkg
RUN go mod download

# 复制服务代码
WORKDIR /app
ARG SERVICE_NAME
COPY services/${SERVICE_NAME} ./services/${SERVICE_NAME}

# 构建服务
WORKDIR /app/services/${SERVICE_NAME}
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /app/service ./cmd/main.go

# ========================================
# 运行阶段
# ========================================
FROM alpine:latest

# 安装 CA 证书和时区数据
RUN apk --no-cache add ca-certificates tzdata

# 创建非 root 用户
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser

WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/service .

# 切换到非 root 用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT:-8000}/health || exit 1

# 暴露端口
EXPOSE ${PORT:-8000}

# 运行服务
CMD ["./service"]
