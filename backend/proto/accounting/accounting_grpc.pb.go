// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/accounting/accounting.proto

package accounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountingService_CreateEntry_FullMethodName            = "/accounting.AccountingService/CreateEntry"
	AccountingService_GetEntry_FullMethodName               = "/accounting.AccountingService/GetEntry"
	AccountingService_ListEntries_FullMethodName            = "/accounting.AccountingService/ListEntries"
	AccountingService_CreateSettlement_FullMethodName       = "/accounting.AccountingService/CreateSettlement"
	AccountingService_GetSettlement_FullMethodName          = "/accounting.AccountingService/GetSettlement"
	AccountingService_ListSettlements_FullMethodName        = "/accounting.AccountingService/ListSettlements"
	AccountingService_UpdateSettlementStatus_FullMethodName = "/accounting.AccountingService/UpdateSettlementStatus"
	AccountingService_GetMerchantBalance_FullMethodName     = "/accounting.AccountingService/GetMerchantBalance"
	AccountingService_GenerateBill_FullMethodName           = "/accounting.AccountingService/GenerateBill"
	AccountingService_ListBills_FullMethodName              = "/accounting.AccountingService/ListBills"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Accounting Service - 会计核算服务
type AccountingServiceClient interface {
	// 账目记录
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	// 结算
	CreateSettlement(ctx context.Context, in *CreateSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	GetSettlement(ctx context.Context, in *GetSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	ListSettlements(ctx context.Context, in *ListSettlementsRequest, opts ...grpc.CallOption) (*ListSettlementsResponse, error)
	UpdateSettlementStatus(ctx context.Context, in *UpdateSettlementStatusRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 账单
	GetMerchantBalance(ctx context.Context, in *GetMerchantBalanceRequest, opts ...grpc.CallOption) (*MerchantBalanceResponse, error)
	GenerateBill(ctx context.Context, in *GenerateBillRequest, opts ...grpc.CallOption) (*BillResponse, error)
	ListBills(ctx context.Context, in *ListBillsRequest, opts ...grpc.CallOption) (*ListBillsResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, AccountingService_ListEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CreateSettlement(ctx context.Context, in *CreateSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetSettlement(ctx context.Context, in *GetSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ListSettlements(ctx context.Context, in *ListSettlementsRequest, opts ...grpc.CallOption) (*ListSettlementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSettlementsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ListSettlements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) UpdateSettlementStatus(ctx context.Context, in *UpdateSettlementStatusRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, AccountingService_UpdateSettlementStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetMerchantBalance(ctx context.Context, in *GetMerchantBalanceRequest, opts ...grpc.CallOption) (*MerchantBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantBalanceResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetMerchantBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GenerateBill(ctx context.Context, in *GenerateBillRequest, opts ...grpc.CallOption) (*BillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillResponse)
	err := c.cc.Invoke(ctx, AccountingService_GenerateBill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ListBills(ctx context.Context, in *ListBillsRequest, opts ...grpc.CallOption) (*ListBillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBillsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ListBills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility.
//
// Accounting Service - 会计核算服务
type AccountingServiceServer interface {
	// 账目记录
	CreateEntry(context.Context, *CreateEntryRequest) (*EntryResponse, error)
	GetEntry(context.Context, *GetEntryRequest) (*EntryResponse, error)
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	// 结算
	CreateSettlement(context.Context, *CreateSettlementRequest) (*SettlementResponse, error)
	GetSettlement(context.Context, *GetSettlementRequest) (*SettlementResponse, error)
	ListSettlements(context.Context, *ListSettlementsRequest) (*ListSettlementsResponse, error)
	UpdateSettlementStatus(context.Context, *UpdateSettlementStatusRequest) (*SettlementResponse, error)
	// 账单
	GetMerchantBalance(context.Context, *GetMerchantBalanceRequest) (*MerchantBalanceResponse, error)
	GenerateBill(context.Context, *GenerateBillRequest) (*BillResponse, error)
	ListBills(context.Context, *ListBillsRequest) (*ListBillsResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountingServiceServer struct{}

func (UnimplementedAccountingServiceServer) CreateEntry(context.Context, *CreateEntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (UnimplementedAccountingServiceServer) GetEntry(context.Context, *GetEntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedAccountingServiceServer) ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedAccountingServiceServer) CreateSettlement(context.Context, *CreateSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettlement not implemented")
}
func (UnimplementedAccountingServiceServer) GetSettlement(context.Context, *GetSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlement not implemented")
}
func (UnimplementedAccountingServiceServer) ListSettlements(context.Context, *ListSettlementsRequest) (*ListSettlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSettlements not implemented")
}
func (UnimplementedAccountingServiceServer) UpdateSettlementStatus(context.Context, *UpdateSettlementStatusRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettlementStatus not implemented")
}
func (UnimplementedAccountingServiceServer) GetMerchantBalance(context.Context, *GetMerchantBalanceRequest) (*MerchantBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantBalance not implemented")
}
func (UnimplementedAccountingServiceServer) GenerateBill(context.Context, *GenerateBillRequest) (*BillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBill not implemented")
}
func (UnimplementedAccountingServiceServer) ListBills(context.Context, *ListBillsRequest) (*ListBillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBills not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}
func (UnimplementedAccountingServiceServer) testEmbeddedByValue()                           {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CreateSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateSettlement(ctx, req.(*CreateSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetSettlement(ctx, req.(*GetSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ListSettlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSettlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ListSettlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ListSettlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ListSettlements(ctx, req.(*ListSettlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_UpdateSettlementStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettlementStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).UpdateSettlementStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_UpdateSettlementStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).UpdateSettlementStatus(ctx, req.(*UpdateSettlementStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetMerchantBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetMerchantBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetMerchantBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetMerchantBalance(ctx, req.(*GetMerchantBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GenerateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GenerateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GenerateBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GenerateBill(ctx, req.(*GenerateBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ListBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ListBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ListBills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ListBills(ctx, req.(*ListBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _AccountingService_CreateEntry_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _AccountingService_GetEntry_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _AccountingService_ListEntries_Handler,
		},
		{
			MethodName: "CreateSettlement",
			Handler:    _AccountingService_CreateSettlement_Handler,
		},
		{
			MethodName: "GetSettlement",
			Handler:    _AccountingService_GetSettlement_Handler,
		},
		{
			MethodName: "ListSettlements",
			Handler:    _AccountingService_ListSettlements_Handler,
		},
		{
			MethodName: "UpdateSettlementStatus",
			Handler:    _AccountingService_UpdateSettlementStatus_Handler,
		},
		{
			MethodName: "GetMerchantBalance",
			Handler:    _AccountingService_GetMerchantBalance_Handler,
		},
		{
			MethodName: "GenerateBill",
			Handler:    _AccountingService_GenerateBill_Handler,
		},
		{
			MethodName: "ListBills",
			Handler:    _AccountingService_ListBills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/accounting/accounting.proto",
}
