// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/analytics/analytics.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_GetPaymentStats_FullMethodName    = "/analytics.AnalyticsService/GetPaymentStats"
	AnalyticsService_GetPaymentTrends_FullMethodName   = "/analytics.AnalyticsService/GetPaymentTrends"
	AnalyticsService_GetChannelStats_FullMethodName    = "/analytics.AnalyticsService/GetChannelStats"
	AnalyticsService_GetMerchantStats_FullMethodName   = "/analytics.AnalyticsService/GetMerchantStats"
	AnalyticsService_GetTopMerchants_FullMethodName    = "/analytics.AnalyticsService/GetTopMerchants"
	AnalyticsService_GetRealtimeMetrics_FullMethodName = "/analytics.AnalyticsService/GetRealtimeMetrics"
	AnalyticsService_GetSystemHealth_FullMethodName    = "/analytics.AnalyticsService/GetSystemHealth"
	AnalyticsService_GenerateReport_FullMethodName     = "/analytics.AnalyticsService/GenerateReport"
	AnalyticsService_ListReports_FullMethodName        = "/analytics.AnalyticsService/ListReports"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Analytics Service - 分析服务
type AnalyticsServiceClient interface {
	// 支付统计
	GetPaymentStats(ctx context.Context, in *GetPaymentStatsRequest, opts ...grpc.CallOption) (*PaymentStatsResponse, error)
	GetPaymentTrends(ctx context.Context, in *GetPaymentTrendsRequest, opts ...grpc.CallOption) (*PaymentTrendsResponse, error)
	GetChannelStats(ctx context.Context, in *GetChannelStatsRequest, opts ...grpc.CallOption) (*ChannelStatsResponse, error)
	// 商户统计
	GetMerchantStats(ctx context.Context, in *GetMerchantStatsRequest, opts ...grpc.CallOption) (*MerchantStatsResponse, error)
	GetTopMerchants(ctx context.Context, in *GetTopMerchantsRequest, opts ...grpc.CallOption) (*TopMerchantsResponse, error)
	// 实时监控
	GetRealtimeMetrics(ctx context.Context, in *GetRealtimeMetricsRequest, opts ...grpc.CallOption) (*RealtimeMetricsResponse, error)
	GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*SystemHealthResponse, error)
	// 自定义报表
	GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetPaymentStats(ctx context.Context, in *GetPaymentStatsRequest, opts ...grpc.CallOption) (*PaymentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPaymentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPaymentTrends(ctx context.Context, in *GetPaymentTrendsRequest, opts ...grpc.CallOption) (*PaymentTrendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentTrendsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPaymentTrends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetChannelStats(ctx context.Context, in *GetChannelStatsRequest, opts ...grpc.CallOption) (*ChannelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetChannelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMerchantStats(ctx context.Context, in *GetMerchantStatsRequest, opts ...grpc.CallOption) (*MerchantStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMerchantStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetTopMerchants(ctx context.Context, in *GetTopMerchantsRequest, opts ...grpc.CallOption) (*TopMerchantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopMerchantsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetTopMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRealtimeMetrics(ctx context.Context, in *GetRealtimeMetricsRequest, opts ...grpc.CallOption) (*RealtimeMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealtimeMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRealtimeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*SystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemHealthResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ListReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
//
// Analytics Service - 分析服务
type AnalyticsServiceServer interface {
	// 支付统计
	GetPaymentStats(context.Context, *GetPaymentStatsRequest) (*PaymentStatsResponse, error)
	GetPaymentTrends(context.Context, *GetPaymentTrendsRequest) (*PaymentTrendsResponse, error)
	GetChannelStats(context.Context, *GetChannelStatsRequest) (*ChannelStatsResponse, error)
	// 商户统计
	GetMerchantStats(context.Context, *GetMerchantStatsRequest) (*MerchantStatsResponse, error)
	GetTopMerchants(context.Context, *GetTopMerchantsRequest) (*TopMerchantsResponse, error)
	// 实时监控
	GetRealtimeMetrics(context.Context, *GetRealtimeMetricsRequest) (*RealtimeMetricsResponse, error)
	GetSystemHealth(context.Context, *GetSystemHealthRequest) (*SystemHealthResponse, error)
	// 自定义报表
	GenerateReport(context.Context, *GenerateReportRequest) (*ReportResponse, error)
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetPaymentStats(context.Context, *GetPaymentStatsRequest) (*PaymentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPaymentTrends(context.Context, *GetPaymentTrendsRequest) (*PaymentTrendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTrends not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetChannelStats(context.Context, *GetChannelStatsRequest) (*ChannelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMerchantStats(context.Context, *GetMerchantStatsRequest) (*MerchantStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetTopMerchants(context.Context, *GetTopMerchantsRequest) (*TopMerchantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMerchants not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRealtimeMetrics(context.Context, *GetRealtimeMetricsRequest) (*RealtimeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetSystemHealth(context.Context, *GetSystemHealthRequest) (*SystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateReport(context.Context, *GenerateReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetPaymentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPaymentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPaymentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPaymentStats(ctx, req.(*GetPaymentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPaymentTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPaymentTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPaymentTrends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPaymentTrends(ctx, req.(*GetPaymentTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetChannelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetChannelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetChannelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetChannelStats(ctx, req.(*GetChannelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMerchantStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMerchantStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMerchantStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMerchantStats(ctx, req.(*GetMerchantStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetTopMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMerchantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetTopMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetTopMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetTopMerchants(ctx, req.(*GetTopMerchantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRealtimeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRealtimeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRealtimeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRealtimeMetrics(ctx, req.(*GetRealtimeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetSystemHealth(ctx, req.(*GetSystemHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateReport(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentStats",
			Handler:    _AnalyticsService_GetPaymentStats_Handler,
		},
		{
			MethodName: "GetPaymentTrends",
			Handler:    _AnalyticsService_GetPaymentTrends_Handler,
		},
		{
			MethodName: "GetChannelStats",
			Handler:    _AnalyticsService_GetChannelStats_Handler,
		},
		{
			MethodName: "GetMerchantStats",
			Handler:    _AnalyticsService_GetMerchantStats_Handler,
		},
		{
			MethodName: "GetTopMerchants",
			Handler:    _AnalyticsService_GetTopMerchants_Handler,
		},
		{
			MethodName: "GetRealtimeMetrics",
			Handler:    _AnalyticsService_GetRealtimeMetrics_Handler,
		},
		{
			MethodName: "GetSystemHealth",
			Handler:    _AnalyticsService_GetSystemHealth_Handler,
		},
		{
			MethodName: "GenerateReport",
			Handler:    _AnalyticsService_GenerateReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _AnalyticsService_ListReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/analytics/analytics.proto",
}
