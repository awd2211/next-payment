// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/channel/channel.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelService_CreatePayment_FullMethodName       = "/channel.ChannelService/CreatePayment"
	ChannelService_QueryPayment_FullMethodName        = "/channel.ChannelService/QueryPayment"
	ChannelService_CancelPayment_FullMethodName       = "/channel.ChannelService/CancelPayment"
	ChannelService_CreateRefund_FullMethodName        = "/channel.ChannelService/CreateRefund"
	ChannelService_QueryRefund_FullMethodName         = "/channel.ChannelService/QueryRefund"
	ChannelService_GetChannelConfig_FullMethodName    = "/channel.ChannelService/GetChannelConfig"
	ChannelService_UpdateChannelConfig_FullMethodName = "/channel.ChannelService/UpdateChannelConfig"
)

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Channel Adapter Service - 支付渠道适配服务
type ChannelServiceClient interface {
	// 支付操作
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	QueryPayment(ctx context.Context, in *QueryPaymentRequest, opts ...grpc.CallOption) (*QueryPaymentResponse, error)
	CancelPayment(ctx context.Context, in *CancelPaymentRequest, opts ...grpc.CallOption) (*CancelPaymentResponse, error)
	// 退款操作
	CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
	QueryRefund(ctx context.Context, in *QueryRefundRequest, opts ...grpc.CallOption) (*QueryRefundResponse, error)
	// 渠道配置
	GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
	UpdateChannelConfig(ctx context.Context, in *UpdateChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, ChannelService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) QueryPayment(ctx context.Context, in *QueryPaymentRequest, opts ...grpc.CallOption) (*QueryPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPaymentResponse)
	err := c.cc.Invoke(ctx, ChannelService_QueryPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CancelPayment(ctx context.Context, in *CancelPaymentRequest, opts ...grpc.CallOption) (*CancelPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPaymentResponse)
	err := c.cc.Invoke(ctx, ChannelService_CancelPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundResponse)
	err := c.cc.Invoke(ctx, ChannelService_CreateRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) QueryRefund(ctx context.Context, in *QueryRefundRequest, opts ...grpc.CallOption) (*QueryRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRefundResponse)
	err := c.cc.Invoke(ctx, ChannelService_QueryRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, ChannelService_GetChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) UpdateChannelConfig(ctx context.Context, in *UpdateChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, ChannelService_UpdateChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServiceServer is the server API for ChannelService service.
// All implementations must embed UnimplementedChannelServiceServer
// for forward compatibility.
//
// Channel Adapter Service - 支付渠道适配服务
type ChannelServiceServer interface {
	// 支付操作
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	QueryPayment(context.Context, *QueryPaymentRequest) (*QueryPaymentResponse, error)
	CancelPayment(context.Context, *CancelPaymentRequest) (*CancelPaymentResponse, error)
	// 退款操作
	CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error)
	QueryRefund(context.Context, *QueryRefundRequest) (*QueryRefundResponse, error)
	// 渠道配置
	GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error)
	UpdateChannelConfig(context.Context, *UpdateChannelConfigRequest) (*ChannelConfigResponse, error)
	mustEmbedUnimplementedChannelServiceServer()
}

// UnimplementedChannelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelServiceServer struct{}

func (UnimplementedChannelServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedChannelServiceServer) QueryPayment(context.Context, *QueryPaymentRequest) (*QueryPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPayment not implemented")
}
func (UnimplementedChannelServiceServer) CancelPayment(context.Context, *CancelPaymentRequest) (*CancelPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayment not implemented")
}
func (UnimplementedChannelServiceServer) CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedChannelServiceServer) QueryRefund(context.Context, *QueryRefundRequest) (*QueryRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefund not implemented")
}
func (UnimplementedChannelServiceServer) GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}
func (UnimplementedChannelServiceServer) UpdateChannelConfig(context.Context, *UpdateChannelConfigRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelConfig not implemented")
}
func (UnimplementedChannelServiceServer) mustEmbedUnimplementedChannelServiceServer() {}
func (UnimplementedChannelServiceServer) testEmbeddedByValue()                        {}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_QueryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).QueryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_QueryPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).QueryPayment(ctx, req.(*QueryPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_CancelPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CancelPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CancelPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CancelPayment(ctx, req.(*CancelPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreateRefund(ctx, req.(*CreateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_QueryRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).QueryRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_QueryRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).QueryRefund(ctx, req.(*QueryRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetChannelConfig(ctx, req.(*GetChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_UpdateChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).UpdateChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_UpdateChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).UpdateChannelConfig(ctx, req.(*UpdateChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _ChannelService_CreatePayment_Handler,
		},
		{
			MethodName: "QueryPayment",
			Handler:    _ChannelService_QueryPayment_Handler,
		},
		{
			MethodName: "CancelPayment",
			Handler:    _ChannelService_CancelPayment_Handler,
		},
		{
			MethodName: "CreateRefund",
			Handler:    _ChannelService_CreateRefund_Handler,
		},
		{
			MethodName: "QueryRefund",
			Handler:    _ChannelService_QueryRefund_Handler,
		},
		{
			MethodName: "GetChannelConfig",
			Handler:    _ChannelService_GetChannelConfig_Handler,
		},
		{
			MethodName: "UpdateChannelConfig",
			Handler:    _ChannelService_UpdateChannelConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/channel/channel.proto",
}
