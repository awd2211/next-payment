// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_GetSystemConfig_FullMethodName      = "/config.ConfigService/GetSystemConfig"
	ConfigService_UpdateSystemConfig_FullMethodName   = "/config.ConfigService/UpdateSystemConfig"
	ConfigService_ListSystemConfigs_FullMethodName    = "/config.ConfigService/ListSystemConfigs"
	ConfigService_GetMerchantConfig_FullMethodName    = "/config.ConfigService/GetMerchantConfig"
	ConfigService_UpdateMerchantConfig_FullMethodName = "/config.ConfigService/UpdateMerchantConfig"
	ConfigService_GetChannelConfig_FullMethodName     = "/config.ConfigService/GetChannelConfig"
	ConfigService_UpdateChannelConfig_FullMethodName  = "/config.ConfigService/UpdateChannelConfig"
	ConfigService_ListChannelConfigs_FullMethodName   = "/config.ConfigService/ListChannelConfigs"
	ConfigService_GetFeeConfig_FullMethodName         = "/config.ConfigService/GetFeeConfig"
	ConfigService_UpdateFeeConfig_FullMethodName      = "/config.ConfigService/UpdateFeeConfig"
	ConfigService_GetLimitConfig_FullMethodName       = "/config.ConfigService/GetLimitConfig"
	ConfigService_UpdateLimitConfig_FullMethodName    = "/config.ConfigService/UpdateLimitConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Config Service - 配置服务
type ConfigServiceClient interface {
	// 系统配置
	GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfigResponse, error)
	UpdateSystemConfig(ctx context.Context, in *UpdateSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfigResponse, error)
	ListSystemConfigs(ctx context.Context, in *ListSystemConfigsRequest, opts ...grpc.CallOption) (*ListSystemConfigsResponse, error)
	// 商户配置
	GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*MerchantConfigResponse, error)
	UpdateMerchantConfig(ctx context.Context, in *UpdateMerchantConfigRequest, opts ...grpc.CallOption) (*MerchantConfigResponse, error)
	// 渠道配置
	GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
	UpdateChannelConfig(ctx context.Context, in *UpdateChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
	ListChannelConfigs(ctx context.Context, in *ListChannelConfigsRequest, opts ...grpc.CallOption) (*ListChannelConfigsResponse, error)
	// 费率配置
	GetFeeConfig(ctx context.Context, in *GetFeeConfigRequest, opts ...grpc.CallOption) (*FeeConfigResponse, error)
	UpdateFeeConfig(ctx context.Context, in *UpdateFeeConfigRequest, opts ...grpc.CallOption) (*FeeConfigResponse, error)
	// 限额配置
	GetLimitConfig(ctx context.Context, in *GetLimitConfigRequest, opts ...grpc.CallOption) (*LimitConfigResponse, error)
	UpdateLimitConfig(ctx context.Context, in *UpdateLimitConfigRequest, opts ...grpc.CallOption) (*LimitConfigResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetSystemConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateSystemConfig(ctx context.Context, in *UpdateSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateSystemConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListSystemConfigs(ctx context.Context, in *ListSystemConfigsRequest, opts ...grpc.CallOption) (*ListSystemConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemConfigsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListSystemConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*MerchantConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetMerchantConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateMerchantConfig(ctx context.Context, in *UpdateMerchantConfigRequest, opts ...grpc.CallOption) (*MerchantConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateMerchantConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateChannelConfig(ctx context.Context, in *UpdateChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListChannelConfigs(ctx context.Context, in *ListChannelConfigsRequest, opts ...grpc.CallOption) (*ListChannelConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelConfigsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListChannelConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetFeeConfig(ctx context.Context, in *GetFeeConfigRequest, opts ...grpc.CallOption) (*FeeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeeConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetFeeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateFeeConfig(ctx context.Context, in *UpdateFeeConfigRequest, opts ...grpc.CallOption) (*FeeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeeConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateFeeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetLimitConfig(ctx context.Context, in *GetLimitConfigRequest, opts ...grpc.CallOption) (*LimitConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LimitConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetLimitConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateLimitConfig(ctx context.Context, in *UpdateLimitConfigRequest, opts ...grpc.CallOption) (*LimitConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LimitConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateLimitConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
//
// Config Service - 配置服务
type ConfigServiceServer interface {
	// 系统配置
	GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfigResponse, error)
	UpdateSystemConfig(context.Context, *UpdateSystemConfigRequest) (*SystemConfigResponse, error)
	ListSystemConfigs(context.Context, *ListSystemConfigsRequest) (*ListSystemConfigsResponse, error)
	// 商户配置
	GetMerchantConfig(context.Context, *GetMerchantConfigRequest) (*MerchantConfigResponse, error)
	UpdateMerchantConfig(context.Context, *UpdateMerchantConfigRequest) (*MerchantConfigResponse, error)
	// 渠道配置
	GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error)
	UpdateChannelConfig(context.Context, *UpdateChannelConfigRequest) (*ChannelConfigResponse, error)
	ListChannelConfigs(context.Context, *ListChannelConfigsRequest) (*ListChannelConfigsResponse, error)
	// 费率配置
	GetFeeConfig(context.Context, *GetFeeConfigRequest) (*FeeConfigResponse, error)
	UpdateFeeConfig(context.Context, *UpdateFeeConfigRequest) (*FeeConfigResponse, error)
	// 限额配置
	GetLimitConfig(context.Context, *GetLimitConfigRequest) (*LimitConfigResponse, error)
	UpdateLimitConfig(context.Context, *UpdateLimitConfigRequest) (*LimitConfigResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateSystemConfig(context.Context, *UpdateSystemConfigRequest) (*SystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemConfig not implemented")
}
func (UnimplementedConfigServiceServer) ListSystemConfigs(context.Context, *ListSystemConfigsRequest) (*ListSystemConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemConfigs not implemented")
}
func (UnimplementedConfigServiceServer) GetMerchantConfig(context.Context, *GetMerchantConfigRequest) (*MerchantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateMerchantConfig(context.Context, *UpdateMerchantConfigRequest) (*MerchantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateChannelConfig(context.Context, *UpdateChannelConfigRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelConfig not implemented")
}
func (UnimplementedConfigServiceServer) ListChannelConfigs(context.Context, *ListChannelConfigsRequest) (*ListChannelConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelConfigs not implemented")
}
func (UnimplementedConfigServiceServer) GetFeeConfig(context.Context, *GetFeeConfigRequest) (*FeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateFeeConfig(context.Context, *UpdateFeeConfigRequest) (*FeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetLimitConfig(context.Context, *GetLimitConfigRequest) (*LimitConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateLimitConfig(context.Context, *UpdateLimitConfigRequest) (*LimitConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimitConfig not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetSystemConfig(ctx, req.(*GetSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateSystemConfig(ctx, req.(*UpdateSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListSystemConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListSystemConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListSystemConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListSystemConfigs(ctx, req.(*ListSystemConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetMerchantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetMerchantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetMerchantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetMerchantConfig(ctx, req.(*GetMerchantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateMerchantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateMerchantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateMerchantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateMerchantConfig(ctx, req.(*UpdateMerchantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetChannelConfig(ctx, req.(*GetChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateChannelConfig(ctx, req.(*UpdateChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListChannelConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListChannelConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListChannelConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListChannelConfigs(ctx, req.(*ListChannelConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetFeeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetFeeConfig(ctx, req.(*GetFeeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateFeeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateFeeConfig(ctx, req.(*UpdateFeeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetLimitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetLimitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetLimitConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetLimitConfig(ctx, req.(*GetLimitConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateLimitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLimitConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateLimitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateLimitConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateLimitConfig(ctx, req.(*UpdateLimitConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemConfig",
			Handler:    _ConfigService_GetSystemConfig_Handler,
		},
		{
			MethodName: "UpdateSystemConfig",
			Handler:    _ConfigService_UpdateSystemConfig_Handler,
		},
		{
			MethodName: "ListSystemConfigs",
			Handler:    _ConfigService_ListSystemConfigs_Handler,
		},
		{
			MethodName: "GetMerchantConfig",
			Handler:    _ConfigService_GetMerchantConfig_Handler,
		},
		{
			MethodName: "UpdateMerchantConfig",
			Handler:    _ConfigService_UpdateMerchantConfig_Handler,
		},
		{
			MethodName: "GetChannelConfig",
			Handler:    _ConfigService_GetChannelConfig_Handler,
		},
		{
			MethodName: "UpdateChannelConfig",
			Handler:    _ConfigService_UpdateChannelConfig_Handler,
		},
		{
			MethodName: "ListChannelConfigs",
			Handler:    _ConfigService_ListChannelConfigs_Handler,
		},
		{
			MethodName: "GetFeeConfig",
			Handler:    _ConfigService_GetFeeConfig_Handler,
		},
		{
			MethodName: "UpdateFeeConfig",
			Handler:    _ConfigService_UpdateFeeConfig_Handler,
		},
		{
			MethodName: "GetLimitConfig",
			Handler:    _ConfigService_GetLimitConfig_Handler,
		},
		{
			MethodName: "UpdateLimitConfig",
			Handler:    _ConfigService_UpdateLimitConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/config/config.proto",
}
