// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/kyc/kyc.proto

package kyc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KYCService_SubmitDocument_FullMethodName       = "/kyc.KYCService/SubmitDocument"
	KYCService_GetDocument_FullMethodName          = "/kyc.KYCService/GetDocument"
	KYCService_UpdateDocumentStatus_FullMethodName = "/kyc.KYCService/UpdateDocumentStatus"
	KYCService_GetMerchantKYCLevel_FullMethodName  = "/kyc.KYCService/GetMerchantKYCLevel"
	KYCService_CreateReview_FullMethodName         = "/kyc.KYCService/CreateReview"
	KYCService_GetReview_FullMethodName            = "/kyc.KYCService/GetReview"
	KYCService_CompleteReview_FullMethodName       = "/kyc.KYCService/CompleteReview"
	KYCService_ListAlerts_FullMethodName           = "/kyc.KYCService/ListAlerts"
)

// KYCServiceClient is the client API for KYCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KYC Service - 商户KYC认证服务
type KYCServiceClient interface {
	// 提交KYC文档
	SubmitDocument(ctx context.Context, in *SubmitDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	// 获取KYC文档
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	// 更新KYC文档状态
	UpdateDocumentStatus(ctx context.Context, in *UpdateDocumentStatusRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	// 获取商户KYC等级
	GetMerchantKYCLevel(ctx context.Context, in *GetMerchantKYCLevelRequest, opts ...grpc.CallOption) (*KYCLevelResponse, error)
	// 创建KYC审核
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// 获取KYC审核
	GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// 完成KYC审核
	CompleteReview(ctx context.Context, in *CompleteReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// 获取KYC告警列表
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
}

type kYCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKYCServiceClient(cc grpc.ClientConnInterface) KYCServiceClient {
	return &kYCServiceClient{cc}
}

func (c *kYCServiceClient) SubmitDocument(ctx context.Context, in *SubmitDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, KYCService_SubmitDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, KYCService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) UpdateDocumentStatus(ctx context.Context, in *UpdateDocumentStatusRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, KYCService_UpdateDocumentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) GetMerchantKYCLevel(ctx context.Context, in *GetMerchantKYCLevelRequest, opts ...grpc.CallOption) (*KYCLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KYCLevelResponse)
	err := c.cc.Invoke(ctx, KYCService_GetMerchantKYCLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, KYCService_CreateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, KYCService_GetReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) CompleteReview(ctx context.Context, in *CompleteReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, KYCService_CompleteReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, KYCService_ListAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KYCServiceServer is the server API for KYCService service.
// All implementations must embed UnimplementedKYCServiceServer
// for forward compatibility.
//
// KYC Service - 商户KYC认证服务
type KYCServiceServer interface {
	// 提交KYC文档
	SubmitDocument(context.Context, *SubmitDocumentRequest) (*DocumentResponse, error)
	// 获取KYC文档
	GetDocument(context.Context, *GetDocumentRequest) (*DocumentResponse, error)
	// 更新KYC文档状态
	UpdateDocumentStatus(context.Context, *UpdateDocumentStatusRequest) (*DocumentResponse, error)
	// 获取商户KYC等级
	GetMerchantKYCLevel(context.Context, *GetMerchantKYCLevelRequest) (*KYCLevelResponse, error)
	// 创建KYC审核
	CreateReview(context.Context, *CreateReviewRequest) (*ReviewResponse, error)
	// 获取KYC审核
	GetReview(context.Context, *GetReviewRequest) (*ReviewResponse, error)
	// 完成KYC审核
	CompleteReview(context.Context, *CompleteReviewRequest) (*ReviewResponse, error)
	// 获取KYC告警列表
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	mustEmbedUnimplementedKYCServiceServer()
}

// UnimplementedKYCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKYCServiceServer struct{}

func (UnimplementedKYCServiceServer) SubmitDocument(context.Context, *SubmitDocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDocument not implemented")
}
func (UnimplementedKYCServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedKYCServiceServer) UpdateDocumentStatus(context.Context, *UpdateDocumentStatusRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentStatus not implemented")
}
func (UnimplementedKYCServiceServer) GetMerchantKYCLevel(context.Context, *GetMerchantKYCLevelRequest) (*KYCLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantKYCLevel not implemented")
}
func (UnimplementedKYCServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedKYCServiceServer) GetReview(context.Context, *GetReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedKYCServiceServer) CompleteReview(context.Context, *CompleteReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteReview not implemented")
}
func (UnimplementedKYCServiceServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedKYCServiceServer) mustEmbedUnimplementedKYCServiceServer() {}
func (UnimplementedKYCServiceServer) testEmbeddedByValue()                    {}

// UnsafeKYCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KYCServiceServer will
// result in compilation errors.
type UnsafeKYCServiceServer interface {
	mustEmbedUnimplementedKYCServiceServer()
}

func RegisterKYCServiceServer(s grpc.ServiceRegistrar, srv KYCServiceServer) {
	// If the following call pancis, it indicates UnimplementedKYCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KYCService_ServiceDesc, srv)
}

func _KYCService_SubmitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).SubmitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_SubmitDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).SubmitDocument(ctx, req.(*SubmitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_UpdateDocumentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).UpdateDocumentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_UpdateDocumentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).UpdateDocumentStatus(ctx, req.(*UpdateDocumentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_GetMerchantKYCLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantKYCLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).GetMerchantKYCLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_GetMerchantKYCLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).GetMerchantKYCLevel(ctx, req.(*GetMerchantKYCLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_GetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).GetReview(ctx, req.(*GetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_CompleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).CompleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_CompleteReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).CompleteReview(ctx, req.(*CompleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYCService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KYCService_ListAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KYCService_ServiceDesc is the grpc.ServiceDesc for KYCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KYCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.KYCService",
	HandlerType: (*KYCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitDocument",
			Handler:    _KYCService_SubmitDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _KYCService_GetDocument_Handler,
		},
		{
			MethodName: "UpdateDocumentStatus",
			Handler:    _KYCService_UpdateDocumentStatus_Handler,
		},
		{
			MethodName: "GetMerchantKYCLevel",
			Handler:    _KYCService_GetMerchantKYCLevel_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _KYCService_CreateReview_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _KYCService_GetReview_Handler,
		},
		{
			MethodName: "CompleteReview",
			Handler:    _KYCService_CompleteReview_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _KYCService_ListAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kyc/kyc.proto",
}
