// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/merchant/merchant.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantService_RegisterMerchant_FullMethodName     = "/merchant.MerchantService/RegisterMerchant"
	MerchantService_GetMerchant_FullMethodName          = "/merchant.MerchantService/GetMerchant"
	MerchantService_ListMerchants_FullMethodName        = "/merchant.MerchantService/ListMerchants"
	MerchantService_UpdateMerchant_FullMethodName       = "/merchant.MerchantService/UpdateMerchant"
	MerchantService_UpdateMerchantStatus_FullMethodName = "/merchant.MerchantService/UpdateMerchantStatus"
	MerchantService_MerchantLogin_FullMethodName        = "/merchant.MerchantService/MerchantLogin"
	MerchantService_GenerateAPIKey_FullMethodName       = "/merchant.MerchantService/GenerateAPIKey"
	MerchantService_ListAPIKeys_FullMethodName          = "/merchant.MerchantService/ListAPIKeys"
	MerchantService_RevokeAPIKey_FullMethodName         = "/merchant.MerchantService/RevokeAPIKey"
	MerchantService_RotateAPISecret_FullMethodName      = "/merchant.MerchantService/RotateAPISecret"
	MerchantService_UpdateWebhookConfig_FullMethodName  = "/merchant.MerchantService/UpdateWebhookConfig"
	MerchantService_GetWebhookConfig_FullMethodName     = "/merchant.MerchantService/GetWebhookConfig"
	MerchantService_TestWebhook_FullMethodName          = "/merchant.MerchantService/TestWebhook"
	MerchantService_ConfigureChannel_FullMethodName     = "/merchant.MerchantService/ConfigureChannel"
	MerchantService_GetChannelConfig_FullMethodName     = "/merchant.MerchantService/GetChannelConfig"
	MerchantService_ListChannelConfigs_FullMethodName   = "/merchant.MerchantService/ListChannelConfigs"
	MerchantService_DisableChannel_FullMethodName       = "/merchant.MerchantService/DisableChannel"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Merchant Service - 商户管理服务
type MerchantServiceClient interface {
	// 商户管理
	RegisterMerchant(ctx context.Context, in *RegisterMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error)
	GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error)
	ListMerchants(ctx context.Context, in *ListMerchantsRequest, opts ...grpc.CallOption) (*ListMerchantsResponse, error)
	UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error)
	UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusRequest, opts ...grpc.CallOption) (*MerchantResponse, error)
	MerchantLogin(ctx context.Context, in *MerchantLoginRequest, opts ...grpc.CallOption) (*MerchantLoginResponse, error)
	// API密钥管理
	GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*APIKeyResponse, error)
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	RevokeAPIKey(ctx context.Context, in *RevokeAPIKeyRequest, opts ...grpc.CallOption) (*RevokeAPIKeyResponse, error)
	RotateAPISecret(ctx context.Context, in *RotateAPISecretRequest, opts ...grpc.CallOption) (*APIKeyResponse, error)
	// Webhook配置
	UpdateWebhookConfig(ctx context.Context, in *UpdateWebhookConfigRequest, opts ...grpc.CallOption) (*WebhookConfigResponse, error)
	GetWebhookConfig(ctx context.Context, in *GetWebhookConfigRequest, opts ...grpc.CallOption) (*WebhookConfigResponse, error)
	TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error)
	// 商户渠道配置
	ConfigureChannel(ctx context.Context, in *ConfigureChannelRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
	GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error)
	ListChannelConfigs(ctx context.Context, in *ListChannelConfigsRequest, opts ...grpc.CallOption) (*ListChannelConfigsResponse, error)
	DisableChannel(ctx context.Context, in *DisableChannelRequest, opts ...grpc.CallOption) (*DisableChannelResponse, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) RegisterMerchant(ctx context.Context, in *RegisterMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResponse)
	err := c.cc.Invoke(ctx, MerchantService_RegisterMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListMerchants(ctx context.Context, in *ListMerchantsRequest, opts ...grpc.CallOption) (*ListMerchantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMerchantsResponse)
	err := c.cc.Invoke(ctx, MerchantService_ListMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*MerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResponse)
	err := c.cc.Invoke(ctx, MerchantService_UpdateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusRequest, opts ...grpc.CallOption) (*MerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResponse)
	err := c.cc.Invoke(ctx, MerchantService_UpdateMerchantStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantLogin(ctx context.Context, in *MerchantLoginRequest, opts ...grpc.CallOption) (*MerchantLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantLoginResponse)
	err := c.cc.Invoke(ctx, MerchantService_MerchantLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*APIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKeyResponse)
	err := c.cc.Invoke(ctx, MerchantService_GenerateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, MerchantService_ListAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RevokeAPIKey(ctx context.Context, in *RevokeAPIKeyRequest, opts ...grpc.CallOption) (*RevokeAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAPIKeyResponse)
	err := c.cc.Invoke(ctx, MerchantService_RevokeAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RotateAPISecret(ctx context.Context, in *RotateAPISecretRequest, opts ...grpc.CallOption) (*APIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKeyResponse)
	err := c.cc.Invoke(ctx, MerchantService_RotateAPISecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateWebhookConfig(ctx context.Context, in *UpdateWebhookConfigRequest, opts ...grpc.CallOption) (*WebhookConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookConfigResponse)
	err := c.cc.Invoke(ctx, MerchantService_UpdateWebhookConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetWebhookConfig(ctx context.Context, in *GetWebhookConfigRequest, opts ...grpc.CallOption) (*WebhookConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookConfigResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetWebhookConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestWebhookResponse)
	err := c.cc.Invoke(ctx, MerchantService_TestWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ConfigureChannel(ctx context.Context, in *ConfigureChannelRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, MerchantService_ConfigureChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelConfigResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListChannelConfigs(ctx context.Context, in *ListChannelConfigsRequest, opts ...grpc.CallOption) (*ListChannelConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelConfigsResponse)
	err := c.cc.Invoke(ctx, MerchantService_ListChannelConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) DisableChannel(ctx context.Context, in *DisableChannelRequest, opts ...grpc.CallOption) (*DisableChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableChannelResponse)
	err := c.cc.Invoke(ctx, MerchantService_DisableChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility.
//
// Merchant Service - 商户管理服务
type MerchantServiceServer interface {
	// 商户管理
	RegisterMerchant(context.Context, *RegisterMerchantRequest) (*MerchantResponse, error)
	GetMerchant(context.Context, *GetMerchantRequest) (*MerchantResponse, error)
	ListMerchants(context.Context, *ListMerchantsRequest) (*ListMerchantsResponse, error)
	UpdateMerchant(context.Context, *UpdateMerchantRequest) (*MerchantResponse, error)
	UpdateMerchantStatus(context.Context, *UpdateMerchantStatusRequest) (*MerchantResponse, error)
	MerchantLogin(context.Context, *MerchantLoginRequest) (*MerchantLoginResponse, error)
	// API密钥管理
	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*APIKeyResponse, error)
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	RevokeAPIKey(context.Context, *RevokeAPIKeyRequest) (*RevokeAPIKeyResponse, error)
	RotateAPISecret(context.Context, *RotateAPISecretRequest) (*APIKeyResponse, error)
	// Webhook配置
	UpdateWebhookConfig(context.Context, *UpdateWebhookConfigRequest) (*WebhookConfigResponse, error)
	GetWebhookConfig(context.Context, *GetWebhookConfigRequest) (*WebhookConfigResponse, error)
	TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error)
	// 商户渠道配置
	ConfigureChannel(context.Context, *ConfigureChannelRequest) (*ChannelConfigResponse, error)
	GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error)
	ListChannelConfigs(context.Context, *ListChannelConfigsRequest) (*ListChannelConfigsResponse, error)
	DisableChannel(context.Context, *DisableChannelRequest) (*DisableChannelResponse, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantServiceServer struct{}

func (UnimplementedMerchantServiceServer) RegisterMerchant(context.Context, *RegisterMerchantRequest) (*MerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchant(context.Context, *GetMerchantRequest) (*MerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) ListMerchants(context.Context, *ListMerchantsRequest) (*ListMerchantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchants not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateMerchant(context.Context, *UpdateMerchantRequest) (*MerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateMerchantStatus(context.Context, *UpdateMerchantStatusRequest) (*MerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantStatus not implemented")
}
func (UnimplementedMerchantServiceServer) MerchantLogin(context.Context, *MerchantLoginRequest) (*MerchantLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantLogin not implemented")
}
func (UnimplementedMerchantServiceServer) GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*APIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAPIKey not implemented")
}
func (UnimplementedMerchantServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedMerchantServiceServer) RevokeAPIKey(context.Context, *RevokeAPIKeyRequest) (*RevokeAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAPIKey not implemented")
}
func (UnimplementedMerchantServiceServer) RotateAPISecret(context.Context, *RotateAPISecretRequest) (*APIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAPISecret not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateWebhookConfig(context.Context, *UpdateWebhookConfigRequest) (*WebhookConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookConfig not implemented")
}
func (UnimplementedMerchantServiceServer) GetWebhookConfig(context.Context, *GetWebhookConfigRequest) (*WebhookConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookConfig not implemented")
}
func (UnimplementedMerchantServiceServer) TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (UnimplementedMerchantServiceServer) ConfigureChannel(context.Context, *ConfigureChannelRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureChannel not implemented")
}
func (UnimplementedMerchantServiceServer) GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}
func (UnimplementedMerchantServiceServer) ListChannelConfigs(context.Context, *ListChannelConfigsRequest) (*ListChannelConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelConfigs not implemented")
}
func (UnimplementedMerchantServiceServer) DisableChannel(context.Context, *DisableChannelRequest) (*DisableChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableChannel not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}
func (UnimplementedMerchantServiceServer) testEmbeddedByValue()                         {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_RegisterMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RegisterMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RegisterMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RegisterMerchant(ctx, req.(*RegisterMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*GetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListMerchants(ctx, req.(*ListMerchantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, req.(*UpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateMerchantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateMerchantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateMerchantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateMerchantStatus(ctx, req.(*UpdateMerchantStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_MerchantLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantLogin(ctx, req.(*MerchantLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GenerateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GenerateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GenerateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GenerateAPIKey(ctx, req.(*GenerateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RevokeAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RevokeAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RevokeAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RevokeAPIKey(ctx, req.(*RevokeAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RotateAPISecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAPISecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RotateAPISecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RotateAPISecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RotateAPISecret(ctx, req.(*RotateAPISecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateWebhookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateWebhookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateWebhookConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateWebhookConfig(ctx, req.(*UpdateWebhookConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetWebhookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetWebhookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetWebhookConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetWebhookConfig(ctx, req.(*GetWebhookConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_TestWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).TestWebhook(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ConfigureChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ConfigureChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ConfigureChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ConfigureChannel(ctx, req.(*ConfigureChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetChannelConfig(ctx, req.(*GetChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListChannelConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListChannelConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListChannelConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListChannelConfigs(ctx, req.(*ListChannelConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_DisableChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).DisableChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_DisableChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).DisableChannel(ctx, req.(*DisableChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMerchant",
			Handler:    _MerchantService_RegisterMerchant_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "ListMerchants",
			Handler:    _MerchantService_ListMerchants_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _MerchantService_UpdateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchantStatus",
			Handler:    _MerchantService_UpdateMerchantStatus_Handler,
		},
		{
			MethodName: "MerchantLogin",
			Handler:    _MerchantService_MerchantLogin_Handler,
		},
		{
			MethodName: "GenerateAPIKey",
			Handler:    _MerchantService_GenerateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _MerchantService_ListAPIKeys_Handler,
		},
		{
			MethodName: "RevokeAPIKey",
			Handler:    _MerchantService_RevokeAPIKey_Handler,
		},
		{
			MethodName: "RotateAPISecret",
			Handler:    _MerchantService_RotateAPISecret_Handler,
		},
		{
			MethodName: "UpdateWebhookConfig",
			Handler:    _MerchantService_UpdateWebhookConfig_Handler,
		},
		{
			MethodName: "GetWebhookConfig",
			Handler:    _MerchantService_GetWebhookConfig_Handler,
		},
		{
			MethodName: "TestWebhook",
			Handler:    _MerchantService_TestWebhook_Handler,
		},
		{
			MethodName: "ConfigureChannel",
			Handler:    _MerchantService_ConfigureChannel_Handler,
		},
		{
			MethodName: "GetChannelConfig",
			Handler:    _MerchantService_GetChannelConfig_Handler,
		},
		{
			MethodName: "ListChannelConfigs",
			Handler:    _MerchantService_ListChannelConfigs_Handler,
		},
		{
			MethodName: "DisableChannel",
			Handler:    _MerchantService_DisableChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant/merchant.proto",
}
