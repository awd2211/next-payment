// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/merchant_auth/merchant_auth.proto

package merchant_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantAuthService_Login_FullMethodName                  = "/merchant_auth.MerchantAuthService/Login"
	MerchantAuthService_RefreshToken_FullMethodName           = "/merchant_auth.MerchantAuthService/RefreshToken"
	MerchantAuthService_Logout_FullMethodName                 = "/merchant_auth.MerchantAuthService/Logout"
	MerchantAuthService_EnableTwoFactor_FullMethodName        = "/merchant_auth.MerchantAuthService/EnableTwoFactor"
	MerchantAuthService_VerifyTwoFactor_FullMethodName        = "/merchant_auth.MerchantAuthService/VerifyTwoFactor"
	MerchantAuthService_DisableTwoFactor_FullMethodName       = "/merchant_auth.MerchantAuthService/DisableTwoFactor"
	MerchantAuthService_GetLoginActivities_FullMethodName     = "/merchant_auth.MerchantAuthService/GetLoginActivities"
	MerchantAuthService_ListSessions_FullMethodName           = "/merchant_auth.MerchantAuthService/ListSessions"
	MerchantAuthService_RevokeSession_FullMethodName          = "/merchant_auth.MerchantAuthService/RevokeSession"
	MerchantAuthService_UpdateSecuritySettings_FullMethodName = "/merchant_auth.MerchantAuthService/UpdateSecuritySettings"
	MerchantAuthService_ChangePassword_FullMethodName         = "/merchant_auth.MerchantAuthService/ChangePassword"
)

// MerchantAuthServiceClient is the client API for MerchantAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Merchant Auth Service - 商户认证服务
type MerchantAuthServiceClient interface {
	// 商户登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 刷新Token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 商户登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 启用双因素认证
	EnableTwoFactor(ctx context.Context, in *EnableTwoFactorRequest, opts ...grpc.CallOption) (*TwoFactorResponse, error)
	// 验证双因素认证
	VerifyTwoFactor(ctx context.Context, in *VerifyTwoFactorRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 禁用双因素认证
	DisableTwoFactor(ctx context.Context, in *DisableTwoFactorRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 获取登录活动
	GetLoginActivities(ctx context.Context, in *GetLoginActivitiesRequest, opts ...grpc.CallOption) (*LoginActivitiesResponse, error)
	// 获取会话列表
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error)
	// 撤销会话
	RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 更新安全设置
	UpdateSecuritySettings(ctx context.Context, in *UpdateSecuritySettingsRequest, opts ...grpc.CallOption) (*SecuritySettingsResponse, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type merchantAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantAuthServiceClient(cc grpc.ClientConnInterface) MerchantAuthServiceClient {
	return &merchantAuthServiceClient{cc}
}

func (c *merchantAuthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) EnableTwoFactor(ctx context.Context, in *EnableTwoFactorRequest, opts ...grpc.CallOption) (*TwoFactorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwoFactorResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_EnableTwoFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) VerifyTwoFactor(ctx context.Context, in *VerifyTwoFactorRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_VerifyTwoFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) DisableTwoFactor(ctx context.Context, in *DisableTwoFactorRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_DisableTwoFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) GetLoginActivities(ctx context.Context, in *GetLoginActivitiesRequest, opts ...grpc.CallOption) (*LoginActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginActivitiesResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_GetLoginActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_RevokeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) UpdateSecuritySettings(ctx context.Context, in *UpdateSecuritySettingsRequest, opts ...grpc.CallOption) (*SecuritySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecuritySettingsResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_UpdateSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAuthServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MerchantAuthService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantAuthServiceServer is the server API for MerchantAuthService service.
// All implementations must embed UnimplementedMerchantAuthServiceServer
// for forward compatibility.
//
// Merchant Auth Service - 商户认证服务
type MerchantAuthServiceServer interface {
	// 商户登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 刷新Token
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
	// 商户登出
	Logout(context.Context, *LogoutRequest) (*StatusResponse, error)
	// 启用双因素认证
	EnableTwoFactor(context.Context, *EnableTwoFactorRequest) (*TwoFactorResponse, error)
	// 验证双因素认证
	VerifyTwoFactor(context.Context, *VerifyTwoFactorRequest) (*StatusResponse, error)
	// 禁用双因素认证
	DisableTwoFactor(context.Context, *DisableTwoFactorRequest) (*StatusResponse, error)
	// 获取登录活动
	GetLoginActivities(context.Context, *GetLoginActivitiesRequest) (*LoginActivitiesResponse, error)
	// 获取会话列表
	ListSessions(context.Context, *ListSessionsRequest) (*SessionsResponse, error)
	// 撤销会话
	RevokeSession(context.Context, *RevokeSessionRequest) (*StatusResponse, error)
	// 更新安全设置
	UpdateSecuritySettings(context.Context, *UpdateSecuritySettingsRequest) (*SecuritySettingsResponse, error)
	// 修改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*StatusResponse, error)
	mustEmbedUnimplementedMerchantAuthServiceServer()
}

// UnimplementedMerchantAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantAuthServiceServer struct{}

func (UnimplementedMerchantAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMerchantAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedMerchantAuthServiceServer) Logout(context.Context, *LogoutRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedMerchantAuthServiceServer) EnableTwoFactor(context.Context, *EnableTwoFactorRequest) (*TwoFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTwoFactor not implemented")
}
func (UnimplementedMerchantAuthServiceServer) VerifyTwoFactor(context.Context, *VerifyTwoFactorRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTwoFactor not implemented")
}
func (UnimplementedMerchantAuthServiceServer) DisableTwoFactor(context.Context, *DisableTwoFactorRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTwoFactor not implemented")
}
func (UnimplementedMerchantAuthServiceServer) GetLoginActivities(context.Context, *GetLoginActivitiesRequest) (*LoginActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginActivities not implemented")
}
func (UnimplementedMerchantAuthServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*SessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedMerchantAuthServiceServer) RevokeSession(context.Context, *RevokeSessionRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSession not implemented")
}
func (UnimplementedMerchantAuthServiceServer) UpdateSecuritySettings(context.Context, *UpdateSecuritySettingsRequest) (*SecuritySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecuritySettings not implemented")
}
func (UnimplementedMerchantAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedMerchantAuthServiceServer) mustEmbedUnimplementedMerchantAuthServiceServer() {}
func (UnimplementedMerchantAuthServiceServer) testEmbeddedByValue()                             {}

// UnsafeMerchantAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantAuthServiceServer will
// result in compilation errors.
type UnsafeMerchantAuthServiceServer interface {
	mustEmbedUnimplementedMerchantAuthServiceServer()
}

func RegisterMerchantAuthServiceServer(s grpc.ServiceRegistrar, srv MerchantAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantAuthService_ServiceDesc, srv)
}

func _MerchantAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_EnableTwoFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTwoFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).EnableTwoFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_EnableTwoFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).EnableTwoFactor(ctx, req.(*EnableTwoFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_VerifyTwoFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTwoFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).VerifyTwoFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_VerifyTwoFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).VerifyTwoFactor(ctx, req.(*VerifyTwoFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_DisableTwoFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTwoFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).DisableTwoFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_DisableTwoFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).DisableTwoFactor(ctx, req.(*DisableTwoFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_GetLoginActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).GetLoginActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_GetLoginActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).GetLoginActivities(ctx, req.(*GetLoginActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_RevokeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).RevokeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_RevokeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).RevokeSession(ctx, req.(*RevokeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_UpdateSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecuritySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).UpdateSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_UpdateSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).UpdateSecuritySettings(ctx, req.(*UpdateSecuritySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantAuthService_ServiceDesc is the grpc.ServiceDesc for MerchantAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant_auth.MerchantAuthService",
	HandlerType: (*MerchantAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MerchantAuthService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _MerchantAuthService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _MerchantAuthService_Logout_Handler,
		},
		{
			MethodName: "EnableTwoFactor",
			Handler:    _MerchantAuthService_EnableTwoFactor_Handler,
		},
		{
			MethodName: "VerifyTwoFactor",
			Handler:    _MerchantAuthService_VerifyTwoFactor_Handler,
		},
		{
			MethodName: "DisableTwoFactor",
			Handler:    _MerchantAuthService_DisableTwoFactor_Handler,
		},
		{
			MethodName: "GetLoginActivities",
			Handler:    _MerchantAuthService_GetLoginActivities_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _MerchantAuthService_ListSessions_Handler,
		},
		{
			MethodName: "RevokeSession",
			Handler:    _MerchantAuthService_RevokeSession_Handler,
		},
		{
			MethodName: "UpdateSecuritySettings",
			Handler:    _MerchantAuthService_UpdateSecuritySettings_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MerchantAuthService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant_auth/merchant_auth.proto",
}
