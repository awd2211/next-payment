// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/notification/notification.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendEmail_FullMethodName           = "/notification.NotificationService/SendEmail"
	NotificationService_GetEmailTemplate_FullMethodName    = "/notification.NotificationService/GetEmailTemplate"
	NotificationService_UpdateEmailTemplate_FullMethodName = "/notification.NotificationService/UpdateEmailTemplate"
	NotificationService_SendWebhook_FullMethodName         = "/notification.NotificationService/SendWebhook"
	NotificationService_ListWebhookLogs_FullMethodName     = "/notification.NotificationService/ListWebhookLogs"
	NotificationService_RetryWebhook_FullMethodName        = "/notification.NotificationService/RetryWebhook"
	NotificationService_SendSMS_FullMethodName             = "/notification.NotificationService/SendSMS"
	NotificationService_ListNotifications_FullMethodName   = "/notification.NotificationService/ListNotifications"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Notification Service - 通知服务
type NotificationServiceClient interface {
	// 邮件通知
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*EmailTemplateResponse, error)
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*EmailTemplateResponse, error)
	// Webhook通知
	SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error)
	ListWebhookLogs(ctx context.Context, in *ListWebhookLogsRequest, opts ...grpc.CallOption) (*ListWebhookLogsResponse, error)
	RetryWebhook(ctx context.Context, in *RetryWebhookRequest, opts ...grpc.CallOption) (*RetryWebhookResponse, error)
	// 短信通知
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// 通知历史
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*EmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*EmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWebhookResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListWebhookLogs(ctx context.Context, in *ListWebhookLogsRequest, opts ...grpc.CallOption) (*ListWebhookLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhookLogsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListWebhookLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RetryWebhook(ctx context.Context, in *RetryWebhookRequest, opts ...grpc.CallOption) (*RetryWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryWebhookResponse)
	err := c.cc.Invoke(ctx, NotificationService_RetryWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// Notification Service - 通知服务
type NotificationServiceServer interface {
	// 邮件通知
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*EmailTemplateResponse, error)
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*EmailTemplateResponse, error)
	// Webhook通知
	SendWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error)
	ListWebhookLogs(context.Context, *ListWebhookLogsRequest) (*ListWebhookLogsResponse, error)
	RetryWebhook(context.Context, *RetryWebhookRequest) (*RetryWebhookResponse, error)
	// 短信通知
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error)
	// 通知历史
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedNotificationServiceServer) GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*EmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*EmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) SendWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhook not implemented")
}
func (UnimplementedNotificationServiceServer) ListWebhookLogs(context.Context, *ListWebhookLogsRequest) (*ListWebhookLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhookLogs not implemented")
}
func (UnimplementedNotificationServiceServer) RetryWebhook(context.Context, *RetryWebhookRequest) (*RetryWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryWebhook not implemented")
}
func (UnimplementedNotificationServiceServer) SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetEmailTemplate(ctx, req.(*GetEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendWebhook(ctx, req.(*SendWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListWebhookLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhookLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListWebhookLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListWebhookLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListWebhookLogs(ctx, req.(*ListWebhookLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RetryWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RetryWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_RetryWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RetryWebhook(ctx, req.(*RetryWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _NotificationService_SendEmail_Handler,
		},
		{
			MethodName: "GetEmailTemplate",
			Handler:    _NotificationService_GetEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _NotificationService_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "SendWebhook",
			Handler:    _NotificationService_SendWebhook_Handler,
		},
		{
			MethodName: "ListWebhookLogs",
			Handler:    _NotificationService_ListWebhookLogs_Handler,
		},
		{
			MethodName: "RetryWebhook",
			Handler:    _NotificationService_RetryWebhook_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _NotificationService_SendSMS_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _NotificationService_ListNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification/notification.proto",
}
