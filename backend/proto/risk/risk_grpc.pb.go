// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/risk/risk.proto

package risk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RiskService_CheckPayment_FullMethodName        = "/risk.RiskService/CheckPayment"
	RiskService_ReportPaymentResult_FullMethodName = "/risk.RiskService/ReportPaymentResult"
	RiskService_CreateRule_FullMethodName          = "/risk.RiskService/CreateRule"
	RiskService_GetRule_FullMethodName             = "/risk.RiskService/GetRule"
	RiskService_ListRules_FullMethodName           = "/risk.RiskService/ListRules"
	RiskService_UpdateRule_FullMethodName          = "/risk.RiskService/UpdateRule"
	RiskService_DeleteRule_FullMethodName          = "/risk.RiskService/DeleteRule"
	RiskService_EnableRule_FullMethodName          = "/risk.RiskService/EnableRule"
	RiskService_DisableRule_FullMethodName         = "/risk.RiskService/DisableRule"
	RiskService_GetCheck_FullMethodName            = "/risk.RiskService/GetCheck"
	RiskService_ListChecks_FullMethodName          = "/risk.RiskService/ListChecks"
	RiskService_AddBlacklist_FullMethodName        = "/risk.RiskService/AddBlacklist"
	RiskService_RemoveBlacklist_FullMethodName     = "/risk.RiskService/RemoveBlacklist"
	RiskService_CheckBlacklist_FullMethodName      = "/risk.RiskService/CheckBlacklist"
	RiskService_ListBlacklist_FullMethodName       = "/risk.RiskService/ListBlacklist"
)

// RiskServiceClient is the client API for RiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Risk Service - 风控服务
type RiskServiceClient interface {
	// 风控检查
	CheckPayment(ctx context.Context, in *CheckPaymentRequest, opts ...grpc.CallOption) (*CheckPaymentResponse, error)
	ReportPaymentResult(ctx context.Context, in *ReportPaymentResultRequest, opts ...grpc.CallOption) (*ReportPaymentResultResponse, error)
	// 规则管理
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	EnableRule(ctx context.Context, in *EnableRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	DisableRule(ctx context.Context, in *DisableRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	// 检查记录
	GetCheck(ctx context.Context, in *GetCheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error)
	// 黑名单管理
	AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error)
	RemoveBlacklist(ctx context.Context, in *RemoveBlacklistRequest, opts ...grpc.CallOption) (*RemoveBlacklistResponse, error)
	CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistResponse, error)
	ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error)
}

type riskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskServiceClient(cc grpc.ClientConnInterface) RiskServiceClient {
	return &riskServiceClient{cc}
}

func (c *riskServiceClient) CheckPayment(ctx context.Context, in *CheckPaymentRequest, opts ...grpc.CallOption) (*CheckPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPaymentResponse)
	err := c.cc.Invoke(ctx, RiskService_CheckPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) ReportPaymentResult(ctx context.Context, in *ReportPaymentResultRequest, opts ...grpc.CallOption) (*ReportPaymentResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportPaymentResultResponse)
	err := c.cc.Invoke(ctx, RiskService_ReportPaymentResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RiskService_CreateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RiskService_GetRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, RiskService_ListRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RiskService_UpdateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, RiskService_DeleteRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) EnableRule(ctx context.Context, in *EnableRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RiskService_EnableRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) DisableRule(ctx context.Context, in *DisableRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RiskService_DisableRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) GetCheck(ctx context.Context, in *GetCheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, RiskService_GetCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChecksResponse)
	err := c.cc.Invoke(ctx, RiskService_ListChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlacklistResponse)
	err := c.cc.Invoke(ctx, RiskService_AddBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) RemoveBlacklist(ctx context.Context, in *RemoveBlacklistRequest, opts ...grpc.CallOption) (*RemoveBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBlacklistResponse)
	err := c.cc.Invoke(ctx, RiskService_RemoveBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBlacklistResponse)
	err := c.cc.Invoke(ctx, RiskService_CheckBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlacklistResponse)
	err := c.cc.Invoke(ctx, RiskService_ListBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskServiceServer is the server API for RiskService service.
// All implementations must embed UnimplementedRiskServiceServer
// for forward compatibility.
//
// Risk Service - 风控服务
type RiskServiceServer interface {
	// 风控检查
	CheckPayment(context.Context, *CheckPaymentRequest) (*CheckPaymentResponse, error)
	ReportPaymentResult(context.Context, *ReportPaymentResultRequest) (*ReportPaymentResultResponse, error)
	// 规则管理
	CreateRule(context.Context, *CreateRuleRequest) (*RuleResponse, error)
	GetRule(context.Context, *GetRuleRequest) (*RuleResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*RuleResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	EnableRule(context.Context, *EnableRuleRequest) (*RuleResponse, error)
	DisableRule(context.Context, *DisableRuleRequest) (*RuleResponse, error)
	// 检查记录
	GetCheck(context.Context, *GetCheckRequest) (*CheckResponse, error)
	ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error)
	// 黑名单管理
	AddBlacklist(context.Context, *AddBlacklistRequest) (*BlacklistResponse, error)
	RemoveBlacklist(context.Context, *RemoveBlacklistRequest) (*RemoveBlacklistResponse, error)
	CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistResponse, error)
	ListBlacklist(context.Context, *ListBlacklistRequest) (*ListBlacklistResponse, error)
	mustEmbedUnimplementedRiskServiceServer()
}

// UnimplementedRiskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRiskServiceServer struct{}

func (UnimplementedRiskServiceServer) CheckPayment(context.Context, *CheckPaymentRequest) (*CheckPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPayment not implemented")
}
func (UnimplementedRiskServiceServer) ReportPaymentResult(context.Context, *ReportPaymentResultRequest) (*ReportPaymentResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPaymentResult not implemented")
}
func (UnimplementedRiskServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRiskServiceServer) GetRule(context.Context, *GetRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRiskServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedRiskServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRiskServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedRiskServiceServer) EnableRule(context.Context, *EnableRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRule not implemented")
}
func (UnimplementedRiskServiceServer) DisableRule(context.Context, *DisableRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRule not implemented")
}
func (UnimplementedRiskServiceServer) GetCheck(context.Context, *GetCheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheck not implemented")
}
func (UnimplementedRiskServiceServer) ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChecks not implemented")
}
func (UnimplementedRiskServiceServer) AddBlacklist(context.Context, *AddBlacklistRequest) (*BlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlacklist not implemented")
}
func (UnimplementedRiskServiceServer) RemoveBlacklist(context.Context, *RemoveBlacklistRequest) (*RemoveBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlacklist not implemented")
}
func (UnimplementedRiskServiceServer) CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlacklist not implemented")
}
func (UnimplementedRiskServiceServer) ListBlacklist(context.Context, *ListBlacklistRequest) (*ListBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlacklist not implemented")
}
func (UnimplementedRiskServiceServer) mustEmbedUnimplementedRiskServiceServer() {}
func (UnimplementedRiskServiceServer) testEmbeddedByValue()                     {}

// UnsafeRiskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskServiceServer will
// result in compilation errors.
type UnsafeRiskServiceServer interface {
	mustEmbedUnimplementedRiskServiceServer()
}

func RegisterRiskServiceServer(s grpc.ServiceRegistrar, srv RiskServiceServer) {
	// If the following call pancis, it indicates UnimplementedRiskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RiskService_ServiceDesc, srv)
}

func _RiskService_CheckPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).CheckPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_CheckPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).CheckPayment(ctx, req.(*CheckPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_ReportPaymentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPaymentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).ReportPaymentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_ReportPaymentResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).ReportPaymentResult(ctx, req.(*ReportPaymentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_ListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_EnableRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).EnableRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_EnableRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).EnableRule(ctx, req.(*EnableRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_DisableRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).DisableRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_DisableRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).DisableRule(ctx, req.(*DisableRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_GetCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).GetCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_GetCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).GetCheck(ctx, req.(*GetCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_ListChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).ListChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_ListChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).ListChecks(ctx, req.(*ListChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_AddBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).AddBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_AddBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).AddBlacklist(ctx, req.(*AddBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_RemoveBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).RemoveBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_RemoveBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).RemoveBlacklist(ctx, req.(*RemoveBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_CheckBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).CheckBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_CheckBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).CheckBlacklist(ctx, req.(*CheckBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_ListBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).ListBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_ListBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).ListBlacklist(ctx, req.(*ListBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskService_ServiceDesc is the grpc.ServiceDesc for RiskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.RiskService",
	HandlerType: (*RiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPayment",
			Handler:    _RiskService_CheckPayment_Handler,
		},
		{
			MethodName: "ReportPaymentResult",
			Handler:    _RiskService_ReportPaymentResult_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RiskService_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RiskService_GetRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RiskService_ListRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RiskService_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RiskService_DeleteRule_Handler,
		},
		{
			MethodName: "EnableRule",
			Handler:    _RiskService_EnableRule_Handler,
		},
		{
			MethodName: "DisableRule",
			Handler:    _RiskService_DisableRule_Handler,
		},
		{
			MethodName: "GetCheck",
			Handler:    _RiskService_GetCheck_Handler,
		},
		{
			MethodName: "ListChecks",
			Handler:    _RiskService_ListChecks_Handler,
		},
		{
			MethodName: "AddBlacklist",
			Handler:    _RiskService_AddBlacklist_Handler,
		},
		{
			MethodName: "RemoveBlacklist",
			Handler:    _RiskService_RemoveBlacklist_Handler,
		},
		{
			MethodName: "CheckBlacklist",
			Handler:    _RiskService_CheckBlacklist_Handler,
		},
		{
			MethodName: "ListBlacklist",
			Handler:    _RiskService_ListBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/risk/risk.proto",
}
