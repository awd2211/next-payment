// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/settlement/settlement.proto

package settlement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SettlementService_CreateSettlement_FullMethodName    = "/settlement.SettlementService/CreateSettlement"
	SettlementService_GetSettlement_FullMethodName       = "/settlement.SettlementService/GetSettlement"
	SettlementService_ListSettlements_FullMethodName     = "/settlement.SettlementService/ListSettlements"
	SettlementService_ApproveSettlement_FullMethodName   = "/settlement.SettlementService/ApproveSettlement"
	SettlementService_RejectSettlement_FullMethodName    = "/settlement.SettlementService/RejectSettlement"
	SettlementService_ConfirmSettlement_FullMethodName   = "/settlement.SettlementService/ConfirmSettlement"
	SettlementService_CalculateSettlement_FullMethodName = "/settlement.SettlementService/CalculateSettlement"
	SettlementService_GetSettlementStats_FullMethodName  = "/settlement.SettlementService/GetSettlementStats"
)

// SettlementServiceClient is the client API for SettlementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Settlement Service - 结算服务
type SettlementServiceClient interface {
	// 创建结算
	CreateSettlement(ctx context.Context, in *CreateSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 获取结算信息
	GetSettlement(ctx context.Context, in *GetSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 查询结算列表
	ListSettlements(ctx context.Context, in *ListSettlementsRequest, opts ...grpc.CallOption) (*ListSettlementsResponse, error)
	// 审批结算
	ApproveSettlement(ctx context.Context, in *ApproveSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 拒绝结算
	RejectSettlement(ctx context.Context, in *RejectSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 确认结算已付款
	ConfirmSettlement(ctx context.Context, in *ConfirmSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	// 计算待结算金额
	CalculateSettlement(ctx context.Context, in *CalculateSettlementRequest, opts ...grpc.CallOption) (*CalculateSettlementResponse, error)
	// 获取结算统计
	GetSettlementStats(ctx context.Context, in *GetSettlementStatsRequest, opts ...grpc.CallOption) (*SettlementStatsResponse, error)
}

type settlementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettlementServiceClient(cc grpc.ClientConnInterface) SettlementServiceClient {
	return &settlementServiceClient{cc}
}

func (c *settlementServiceClient) CreateSettlement(ctx context.Context, in *CreateSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_CreateSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) GetSettlement(ctx context.Context, in *GetSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_GetSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) ListSettlements(ctx context.Context, in *ListSettlementsRequest, opts ...grpc.CallOption) (*ListSettlementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSettlementsResponse)
	err := c.cc.Invoke(ctx, SettlementService_ListSettlements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) ApproveSettlement(ctx context.Context, in *ApproveSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_ApproveSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) RejectSettlement(ctx context.Context, in *RejectSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_RejectSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) ConfirmSettlement(ctx context.Context, in *ConfirmSettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_ConfirmSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) CalculateSettlement(ctx context.Context, in *CalculateSettlementRequest, opts ...grpc.CallOption) (*CalculateSettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateSettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_CalculateSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) GetSettlementStats(ctx context.Context, in *GetSettlementStatsRequest, opts ...grpc.CallOption) (*SettlementStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettlementStatsResponse)
	err := c.cc.Invoke(ctx, SettlementService_GetSettlementStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementServiceServer is the server API for SettlementService service.
// All implementations must embed UnimplementedSettlementServiceServer
// for forward compatibility.
//
// Settlement Service - 结算服务
type SettlementServiceServer interface {
	// 创建结算
	CreateSettlement(context.Context, *CreateSettlementRequest) (*SettlementResponse, error)
	// 获取结算信息
	GetSettlement(context.Context, *GetSettlementRequest) (*SettlementResponse, error)
	// 查询结算列表
	ListSettlements(context.Context, *ListSettlementsRequest) (*ListSettlementsResponse, error)
	// 审批结算
	ApproveSettlement(context.Context, *ApproveSettlementRequest) (*SettlementResponse, error)
	// 拒绝结算
	RejectSettlement(context.Context, *RejectSettlementRequest) (*SettlementResponse, error)
	// 确认结算已付款
	ConfirmSettlement(context.Context, *ConfirmSettlementRequest) (*SettlementResponse, error)
	// 计算待结算金额
	CalculateSettlement(context.Context, *CalculateSettlementRequest) (*CalculateSettlementResponse, error)
	// 获取结算统计
	GetSettlementStats(context.Context, *GetSettlementStatsRequest) (*SettlementStatsResponse, error)
	mustEmbedUnimplementedSettlementServiceServer()
}

// UnimplementedSettlementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSettlementServiceServer struct{}

func (UnimplementedSettlementServiceServer) CreateSettlement(context.Context, *CreateSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) GetSettlement(context.Context, *GetSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) ListSettlements(context.Context, *ListSettlementsRequest) (*ListSettlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSettlements not implemented")
}
func (UnimplementedSettlementServiceServer) ApproveSettlement(context.Context, *ApproveSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) RejectSettlement(context.Context, *RejectSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) ConfirmSettlement(context.Context, *ConfirmSettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) CalculateSettlement(context.Context, *CalculateSettlementRequest) (*CalculateSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) GetSettlementStats(context.Context, *GetSettlementStatsRequest) (*SettlementStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementStats not implemented")
}
func (UnimplementedSettlementServiceServer) mustEmbedUnimplementedSettlementServiceServer() {}
func (UnimplementedSettlementServiceServer) testEmbeddedByValue()                           {}

// UnsafeSettlementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettlementServiceServer will
// result in compilation errors.
type UnsafeSettlementServiceServer interface {
	mustEmbedUnimplementedSettlementServiceServer()
}

func RegisterSettlementServiceServer(s grpc.ServiceRegistrar, srv SettlementServiceServer) {
	// If the following call pancis, it indicates UnimplementedSettlementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SettlementService_ServiceDesc, srv)
}

func _SettlementService_CreateSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).CreateSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_CreateSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).CreateSettlement(ctx, req.(*CreateSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_GetSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).GetSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_GetSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).GetSettlement(ctx, req.(*GetSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_ListSettlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSettlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).ListSettlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_ListSettlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).ListSettlements(ctx, req.(*ListSettlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_ApproveSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).ApproveSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_ApproveSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).ApproveSettlement(ctx, req.(*ApproveSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_RejectSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).RejectSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_RejectSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).RejectSettlement(ctx, req.(*RejectSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_ConfirmSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).ConfirmSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_ConfirmSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).ConfirmSettlement(ctx, req.(*ConfirmSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_CalculateSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).CalculateSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_CalculateSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).CalculateSettlement(ctx, req.(*CalculateSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_GetSettlementStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettlementStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).GetSettlementStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_GetSettlementStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).GetSettlementStats(ctx, req.(*GetSettlementStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettlementService_ServiceDesc is the grpc.ServiceDesc for SettlementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettlementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settlement.SettlementService",
	HandlerType: (*SettlementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSettlement",
			Handler:    _SettlementService_CreateSettlement_Handler,
		},
		{
			MethodName: "GetSettlement",
			Handler:    _SettlementService_GetSettlement_Handler,
		},
		{
			MethodName: "ListSettlements",
			Handler:    _SettlementService_ListSettlements_Handler,
		},
		{
			MethodName: "ApproveSettlement",
			Handler:    _SettlementService_ApproveSettlement_Handler,
		},
		{
			MethodName: "RejectSettlement",
			Handler:    _SettlementService_RejectSettlement_Handler,
		},
		{
			MethodName: "ConfirmSettlement",
			Handler:    _SettlementService_ConfirmSettlement_Handler,
		},
		{
			MethodName: "CalculateSettlement",
			Handler:    _SettlementService_CalculateSettlement_Handler,
		},
		{
			MethodName: "GetSettlementStats",
			Handler:    _SettlementService_GetSettlementStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/settlement/settlement.proto",
}
