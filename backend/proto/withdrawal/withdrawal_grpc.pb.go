// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/withdrawal/withdrawal.proto

package withdrawal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WithdrawalService_CreateWithdrawal_FullMethodName      = "/withdrawal.WithdrawalService/CreateWithdrawal"
	WithdrawalService_GetWithdrawal_FullMethodName         = "/withdrawal.WithdrawalService/GetWithdrawal"
	WithdrawalService_ListWithdrawals_FullMethodName       = "/withdrawal.WithdrawalService/ListWithdrawals"
	WithdrawalService_ApproveWithdrawal_FullMethodName     = "/withdrawal.WithdrawalService/ApproveWithdrawal"
	WithdrawalService_RejectWithdrawal_FullMethodName      = "/withdrawal.WithdrawalService/RejectWithdrawal"
	WithdrawalService_ConfirmWithdrawal_FullMethodName     = "/withdrawal.WithdrawalService/ConfirmWithdrawal"
	WithdrawalService_CancelWithdrawal_FullMethodName      = "/withdrawal.WithdrawalService/CancelWithdrawal"
	WithdrawalService_AddBankAccount_FullMethodName        = "/withdrawal.WithdrawalService/AddBankAccount"
	WithdrawalService_ListBankAccounts_FullMethodName      = "/withdrawal.WithdrawalService/ListBankAccounts"
	WithdrawalService_SetDefaultBankAccount_FullMethodName = "/withdrawal.WithdrawalService/SetDefaultBankAccount"
	WithdrawalService_CreateWithdrawalBatch_FullMethodName = "/withdrawal.WithdrawalService/CreateWithdrawalBatch"
	WithdrawalService_GetWithdrawalStats_FullMethodName    = "/withdrawal.WithdrawalService/GetWithdrawalStats"
)

// WithdrawalServiceClient is the client API for WithdrawalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Withdrawal Service - 提现服务
type WithdrawalServiceClient interface {
	// 创建提现申请
	CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 获取提现信息
	GetWithdrawal(ctx context.Context, in *GetWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 查询提现列表
	ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error)
	// 审批提现
	ApproveWithdrawal(ctx context.Context, in *ApproveWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 拒绝提现
	RejectWithdrawal(ctx context.Context, in *RejectWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 确认提现已付款
	ConfirmWithdrawal(ctx context.Context, in *ConfirmWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 取消提现
	CancelWithdrawal(ctx context.Context, in *CancelWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 添加银行账户
	AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	// 获取银行账户列表
	ListBankAccounts(ctx context.Context, in *ListBankAccountsRequest, opts ...grpc.CallOption) (*ListBankAccountsResponse, error)
	// 设置默认银行账户
	SetDefaultBankAccount(ctx context.Context, in *SetDefaultBankAccountRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 创建提现批次
	CreateWithdrawalBatch(ctx context.Context, in *CreateWithdrawalBatchRequest, opts ...grpc.CallOption) (*WithdrawalBatchResponse, error)
	// 获取提现统计
	GetWithdrawalStats(ctx context.Context, in *GetWithdrawalStatsRequest, opts ...grpc.CallOption) (*WithdrawalStatsResponse, error)
}

type withdrawalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawalServiceClient(cc grpc.ClientConnInterface) WithdrawalServiceClient {
	return &withdrawalServiceClient{cc}
}

func (c *withdrawalServiceClient) CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_CreateWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) GetWithdrawal(ctx context.Context, in *GetWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_GetWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawalsResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_ListWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) ApproveWithdrawal(ctx context.Context, in *ApproveWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_ApproveWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) RejectWithdrawal(ctx context.Context, in *RejectWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_RejectWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) ConfirmWithdrawal(ctx context.Context, in *ConfirmWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_ConfirmWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) CancelWithdrawal(ctx context.Context, in *CancelWithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_CancelWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_AddBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) ListBankAccounts(ctx context.Context, in *ListBankAccountsRequest, opts ...grpc.CallOption) (*ListBankAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBankAccountsResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_ListBankAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) SetDefaultBankAccount(ctx context.Context, in *SetDefaultBankAccountRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_SetDefaultBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) CreateWithdrawalBatch(ctx context.Context, in *CreateWithdrawalBatchRequest, opts ...grpc.CallOption) (*WithdrawalBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalBatchResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_CreateWithdrawalBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawalServiceClient) GetWithdrawalStats(ctx context.Context, in *GetWithdrawalStatsRequest, opts ...grpc.CallOption) (*WithdrawalStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalStatsResponse)
	err := c.cc.Invoke(ctx, WithdrawalService_GetWithdrawalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawalServiceServer is the server API for WithdrawalService service.
// All implementations must embed UnimplementedWithdrawalServiceServer
// for forward compatibility.
//
// Withdrawal Service - 提现服务
type WithdrawalServiceServer interface {
	// 创建提现申请
	CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*WithdrawalResponse, error)
	// 获取提现信息
	GetWithdrawal(context.Context, *GetWithdrawalRequest) (*WithdrawalResponse, error)
	// 查询提现列表
	ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error)
	// 审批提现
	ApproveWithdrawal(context.Context, *ApproveWithdrawalRequest) (*WithdrawalResponse, error)
	// 拒绝提现
	RejectWithdrawal(context.Context, *RejectWithdrawalRequest) (*WithdrawalResponse, error)
	// 确认提现已付款
	ConfirmWithdrawal(context.Context, *ConfirmWithdrawalRequest) (*WithdrawalResponse, error)
	// 取消提现
	CancelWithdrawal(context.Context, *CancelWithdrawalRequest) (*WithdrawalResponse, error)
	// 添加银行账户
	AddBankAccount(context.Context, *AddBankAccountRequest) (*BankAccountResponse, error)
	// 获取银行账户列表
	ListBankAccounts(context.Context, *ListBankAccountsRequest) (*ListBankAccountsResponse, error)
	// 设置默认银行账户
	SetDefaultBankAccount(context.Context, *SetDefaultBankAccountRequest) (*StatusResponse, error)
	// 创建提现批次
	CreateWithdrawalBatch(context.Context, *CreateWithdrawalBatchRequest) (*WithdrawalBatchResponse, error)
	// 获取提现统计
	GetWithdrawalStats(context.Context, *GetWithdrawalStatsRequest) (*WithdrawalStatsResponse, error)
	mustEmbedUnimplementedWithdrawalServiceServer()
}

// UnimplementedWithdrawalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWithdrawalServiceServer struct{}

func (UnimplementedWithdrawalServiceServer) CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) GetWithdrawal(context.Context, *GetWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedWithdrawalServiceServer) ApproveWithdrawal(context.Context, *ApproveWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) RejectWithdrawal(context.Context, *RejectWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) ConfirmWithdrawal(context.Context, *ConfirmWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) CancelWithdrawal(context.Context, *CancelWithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithdrawal not implemented")
}
func (UnimplementedWithdrawalServiceServer) AddBankAccount(context.Context, *AddBankAccountRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankAccount not implemented")
}
func (UnimplementedWithdrawalServiceServer) ListBankAccounts(context.Context, *ListBankAccountsRequest) (*ListBankAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBankAccounts not implemented")
}
func (UnimplementedWithdrawalServiceServer) SetDefaultBankAccount(context.Context, *SetDefaultBankAccountRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBankAccount not implemented")
}
func (UnimplementedWithdrawalServiceServer) CreateWithdrawalBatch(context.Context, *CreateWithdrawalBatchRequest) (*WithdrawalBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawalBatch not implemented")
}
func (UnimplementedWithdrawalServiceServer) GetWithdrawalStats(context.Context, *GetWithdrawalStatsRequest) (*WithdrawalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalStats not implemented")
}
func (UnimplementedWithdrawalServiceServer) mustEmbedUnimplementedWithdrawalServiceServer() {}
func (UnimplementedWithdrawalServiceServer) testEmbeddedByValue()                           {}

// UnsafeWithdrawalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawalServiceServer will
// result in compilation errors.
type UnsafeWithdrawalServiceServer interface {
	mustEmbedUnimplementedWithdrawalServiceServer()
}

func RegisterWithdrawalServiceServer(s grpc.ServiceRegistrar, srv WithdrawalServiceServer) {
	// If the following call pancis, it indicates UnimplementedWithdrawalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WithdrawalService_ServiceDesc, srv)
}

func _WithdrawalService_CreateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).CreateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_CreateWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).CreateWithdrawal(ctx, req.(*CreateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_GetWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).GetWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_GetWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).GetWithdrawal(ctx, req.(*GetWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_ListWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).ListWithdrawals(ctx, req.(*ListWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_ApproveWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).ApproveWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_ApproveWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).ApproveWithdrawal(ctx, req.(*ApproveWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_RejectWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).RejectWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_RejectWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).RejectWithdrawal(ctx, req.(*RejectWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_ConfirmWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).ConfirmWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_ConfirmWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).ConfirmWithdrawal(ctx, req.(*ConfirmWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_CancelWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).CancelWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_CancelWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).CancelWithdrawal(ctx, req.(*CancelWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_AddBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).AddBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_AddBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).AddBankAccount(ctx, req.(*AddBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_ListBankAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBankAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).ListBankAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_ListBankAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).ListBankAccounts(ctx, req.(*ListBankAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_SetDefaultBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).SetDefaultBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_SetDefaultBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).SetDefaultBankAccount(ctx, req.(*SetDefaultBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_CreateWithdrawalBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawalBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).CreateWithdrawalBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_CreateWithdrawalBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).CreateWithdrawalBatch(ctx, req.(*CreateWithdrawalBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawalService_GetWithdrawalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawalServiceServer).GetWithdrawalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawalService_GetWithdrawalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawalServiceServer).GetWithdrawalStats(ctx, req.(*GetWithdrawalStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawalService_ServiceDesc is the grpc.ServiceDesc for WithdrawalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "withdrawal.WithdrawalService",
	HandlerType: (*WithdrawalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWithdrawal",
			Handler:    _WithdrawalService_CreateWithdrawal_Handler,
		},
		{
			MethodName: "GetWithdrawal",
			Handler:    _WithdrawalService_GetWithdrawal_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _WithdrawalService_ListWithdrawals_Handler,
		},
		{
			MethodName: "ApproveWithdrawal",
			Handler:    _WithdrawalService_ApproveWithdrawal_Handler,
		},
		{
			MethodName: "RejectWithdrawal",
			Handler:    _WithdrawalService_RejectWithdrawal_Handler,
		},
		{
			MethodName: "ConfirmWithdrawal",
			Handler:    _WithdrawalService_ConfirmWithdrawal_Handler,
		},
		{
			MethodName: "CancelWithdrawal",
			Handler:    _WithdrawalService_CancelWithdrawal_Handler,
		},
		{
			MethodName: "AddBankAccount",
			Handler:    _WithdrawalService_AddBankAccount_Handler,
		},
		{
			MethodName: "ListBankAccounts",
			Handler:    _WithdrawalService_ListBankAccounts_Handler,
		},
		{
			MethodName: "SetDefaultBankAccount",
			Handler:    _WithdrawalService_SetDefaultBankAccount_Handler,
		},
		{
			MethodName: "CreateWithdrawalBatch",
			Handler:    _WithdrawalService_CreateWithdrawalBatch_Handler,
		},
		{
			MethodName: "GetWithdrawalStats",
			Handler:    _WithdrawalService_GetWithdrawalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/withdrawal/withdrawal.proto",
}
