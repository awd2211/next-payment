version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: payment-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_platform
    ports:
      - "40432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: payment-redis
    ports:
      - "40379:6379"
    volumes:
      - redis_data:/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Kafka消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: payment-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - payment-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: payment-kafka
    depends_on:
      - zookeeper
    ports:
      - "40092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:40092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - payment-network

  # ========================================
  # 微服务在本地开发机器运行（使用 Air 热加载）
  # Docker 只运行基础设施组件
  # ========================================

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: payment-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "40090:9090"
    volumes:
      - ./backend/deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./backend/deployments/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - payment-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: payment-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:40300
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "40300:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/deployments/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - payment-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: payment-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "40775:5775/udp"
      - "40831:6831/udp"
      - "40832:6832/udp"
      - "40778:5778"
      - "40686:16686"  # Jaeger UI
      - "40268:14268"
      - "40250:14250"
      - "40411:9411"
    networks:
      - payment-network

  # ========================================
  # 监控组件 - Exporters
  # ========================================

  # PostgreSQL Exporter - 数据库监控
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: payment-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/payment_platform?sslmode=disable"
    ports:
      - "40187:9187"
    depends_on:
      - postgres
    networks:
      - payment-network
    restart: unless-stopped

  # Redis Exporter - 缓存监控
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: payment-redis-exporter
    environment:
      REDIS_ADDR: "redis:6379"
    ports:
      - "40121:9121"
    depends_on:
      - redis
    networks:
      - payment-network
    restart: unless-stopped

  # Kafka Exporter - 消息队列监控
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: payment-kafka-exporter
    command:
      - '--kafka.server=kafka:9092'
    ports:
      - "40308:9308"
    depends_on:
      - kafka
    networks:
      - payment-network
    restart: unless-stopped

  # cAdvisor - 容器监控
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: payment-cadvisor
    privileged: true
    ports:
      - "40180:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - payment-network
    restart: unless-stopped

  # Node Exporter - 主机监控
  node-exporter:
    image: prom/node-exporter:latest
    container_name: payment-node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "40100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - payment-network
    restart: unless-stopped
    pid: host

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  payment-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: br-payment
