version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: payment-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_platform
    ports:
      - "40432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: payment-redis
    ports:
      - "40379:6379"
    volumes:
      - redis_data:/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Kafka消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: payment-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    ports:
      - "42181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: payment-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "40092:9092"
      - "40093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # 监听器配置 - 支持内部和外部访问
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:40093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # 主题配置
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # 日志配置
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      # 性能配置
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # JVM 配置
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Kafka UI - 可视化管理工具
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: payment-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "40084:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: payment-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      AUTH_TYPE: "DISABLED"
      MANAGEMENT_HEALTH_LDAP_ENABLED: "false"
    networks:
      - payment-network
    restart: unless-stopped

  # ========================================
  # Kong API Gateway
  # ========================================

  # Kong PostgreSQL Database
  kong-database:
    image: postgres:15-alpine
    container_name: kong-postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_secret
    ports:
      - "40433:5432"
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kong Bootstrap - Database Initialization
  kong-bootstrap:
    image: kong:3.9
    container_name: kong-bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_secret
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - payment-network
    restart: on-failure

  # Kong Gateway
  kong:
    image: kong:3.9
    container_name: kong-gateway
    depends_on:
      kong-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      # Database
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_secret
      KONG_PG_DATABASE: kong
      # Listeners
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # Logging
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: info
      # Plugins
      KONG_PLUGINS: bundled
      # Nginx
      KONG_NGINX_WORKER_PROCESSES: 2
      KONG_NGINX_HTTP_CLIENT_BODY_BUFFER_SIZE: 8k
      # Other
      KONG_TRUSTED_IPS: 0.0.0.0/0,::/0
      # mTLS Configuration (for connecting to backend services) - 暂时禁用
      # KONG_CLIENT_SSL: "on"
      # KONG_CLIENT_SSL_CERT: /kong/certs/kong-gateway/cert.pem
      # KONG_CLIENT_SSL_CERT_KEY: /kong/certs/kong-gateway/key.pem
      # KONG_LUA_SSL_TRUSTED_CERTIFICATE: /kong/certs/ca/ca-cert.pem
      # KONG_LUA_SSL_VERIFY_DEPTH: 2
    ports:
      - "40080:8000"   # Kong Proxy (API Gateway)
      - "40081:8001"   # Kong Admin API
    volumes:
      # Mount mTLS certificates
      - ./backend/certs:/kong/certs:ro
    networks:
      - payment-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Konga - Kong Admin UI
  konga:
    image: pantsel/konga:latest
    container_name: konga-ui
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_secret
      DB_DATABASE: konga
      TOKEN_SECRET: konga_secret_token_change_in_production
      KONGA_HOOK_TIMEOUT: 120000
    ports:
      - "50001:1337"  # Konga Web UI (修改为50001端口)
    networks:
      - payment-network
    restart: unless-stopped

  # ========================================
  # 微服务在本地开发机器运行（使用 Air 热加载）
  # Docker 只运行基础设施组件
  # ========================================

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: payment-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "40090:9090"
    volumes:
      - ./backend/deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./backend/deployments/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - payment-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: payment-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:40300
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "40300:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/deployments/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - payment-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: payment-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=info
    ports:
      - "50775:5775/udp"  # Zipkin compact thrift
      - "50831:6831/udp"  # Jaeger compact thrift
      - "50832:6832/udp"  # Jaeger binary thrift
      - "50778:5778"      # Jaeger configs
      - "50686:16686"     # Jaeger UI (修改为50686端口)
      - "50268:14268"     # Jaeger HTTP collector
      - "50250:14250"     # Jaeger gRPC
      - "50411:9411"      # Zipkin HTTP
      - "50317:4317"      # OTLP gRPC
      - "50318:4318"      # OTLP HTTP
    networks:
      - payment-network
    restart: unless-stopped

  # ========================================
  # 监控组件 - Exporters
  # ========================================

  # PostgreSQL Exporter - 数据库监控
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: payment-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/payment_platform?sslmode=disable"
    ports:
      - "40187:9187"
    depends_on:
      - postgres
    networks:
      - payment-network
    restart: unless-stopped

  # Redis Exporter - 缓存监控
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: payment-redis-exporter
    environment:
      REDIS_ADDR: "redis:6379"
    ports:
      - "40121:9121"
    depends_on:
      - redis
    networks:
      - payment-network
    restart: unless-stopped

  # Kafka Exporter - 消息队列监控
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: payment-kafka-exporter
    command:
      - '--kafka.server=kafka:9092'
    ports:
      - "40308:9308"
    depends_on:
      - kafka
    networks:
      - payment-network
    restart: unless-stopped

  # cAdvisor - 容器监控
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: payment-cadvisor
    privileged: true
    ports:
      - "40180:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - payment-network
    restart: unless-stopped

  # Node Exporter - 主机监控
  node-exporter:
    image: prom/node-exporter:latest
    container_name: payment-node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "40100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - payment-network
    restart: unless-stopped
    pid: host

  # Elasticsearch (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: payment-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "40920:9200"      # Elasticsearch HTTP
      - "40930:9300"      # Elasticsearch TCP
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kibana (ELK Stack)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: payment-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "40561:5601"      # Kibana UI
    networks:
      - payment-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Logstash (ELK Stack)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: payment-logstash
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./backend/logs:/var/log/payment:ro
    ports:
      - "40514:5014"      # Logstash TCP input
      - "40515:5015"      # Logstash UDP input
      - "40944:9600"      # Logstash monitoring
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - payment-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:
  kong_postgres_data:
  elasticsearch_data:

networks:
  payment-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: br-payment
